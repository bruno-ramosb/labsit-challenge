// <auto-generated />
using System;
using Labsit.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Labsit.Infrastructure.Migrations
{
    [DbContext(typeof(LabsitContext))]
    partial class LabsitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("Labsit.Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ACCOUNTNUMBER");

                    b.Property<decimal>("AvailableCreditLimit")
                        .HasColumnType("TEXT")
                        .HasColumnName("AVAILABLECREDITLIMIT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasColumnName("BALANCE");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("BRANCHCODE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDCUSTOMER");

                    b.Property<decimal>("TotalCreditLimit")
                        .HasColumnType("TEXT")
                        .HasColumnName("TOTALCREDITLIMIT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("BANKACCOUNT", "FINANCE");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Brand")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Brand");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("HolderName");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("Number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("VerificationCode");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("CARD", "FINANCE");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT")
                        .HasColumnName("Document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER", "FINANCE");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("Labsit.Domain.Entities.Customer", "Customer")
                        .WithOne("BankAccount")
                        .HasForeignKey("Labsit.Domain.Entities.BankAccount", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.Card", b =>
                {
                    b.HasOne("Labsit.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("Cards")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Labsit.Domain.Entities.Customer", b =>
                {
                    b.Navigation("BankAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
